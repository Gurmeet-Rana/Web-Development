               CASCADING STYLE SHEETS
It is a stylesheet language used to desc the presentation of a doc written in HTML or XML .
- INLINE styling using style attribute 
- INTERNAL styling using style tag .
- EXTERNAL by writing CSS in external file and then linking it with link and rel attribute along with href . 

 -> ARRANGE THESE IN ORDER OF SPECIFICITY .   

   HOW HTML LOADS CSS FILE ? SERVER LOADS HTML file which make req to css file and loads it . 

              BASICS- 
1. CSS rule structure consists of a selector and a declaration block . Declarations are used to define the style prop for the selected elements . Each declaration consists of a prop and a value .    
   TYPES OF SELECTORS : 
   a. CLASS SELECTOR : WITH . Operator
   b. ID SELECTOR : WITH # operator 
   c. Pseudo SELECTOR : WITH : operator
2. CSS SPECIFICITY : 
3. CSS COMENTS : /* */
4. COLORS IN CSS : {
      RGB : 0-255
      HEX : 00-FF
      RGBA : A stands for opacity
      HSL : {Hue , Saturation , Lightness} 
              Hue : A pure Color 
              Tint : A pure Color with just white added  
              Shade : A pure color with just black added 
              Tone : A pure color with just grey added 
      HSLA : 
   }
5. BACKGROUND PROPERTIES : 
{
   background-color : sets the background color of an element 

   background-image : specifies the image to be used as the background 

      = url(' ')

   background-position : sets the starting position of the background image

   background-size : defines the size of the background image 

      =cover / content / 100% 100% / left bottom etc / 

   background-repeat : determines how the background image repeats
      = no-repeat/repeat-x/repeat-y/

   background-attachment : specifies if the background image scrolss with the content

   background-blend-mode : difference / screen / multiply / overlay 

}
  
      CSS UNITS  
 Absolute Lengths             
 1. px  (smallest uni
 t of length )   
 100%=16 px                       
 2. in(inches)                   
 3. pt(points)                

Relative Lengths 
1.em = 16px . It is calculated based on the font size of the parent element . 
2. rem . It is based on the font size of the root (html) element . 
3. % 

   FONT PROPERTIES 
1. FONT FAMILY - 
2. FONT SIZE - 
3. FONT STYLE -  like italic
4. FONT VARIANT - 
5. FONT WEIGHT - 
   ADD CUSTOM FONT STYLE : @font-face rule {
      font-family  : 
      src:url('path') 
   }
   WHAT IS A FALLBACK FONT ? WHY IS IT IMP 
   -> SO THAT TEXT REMAINS LEGIBLE ON A VARIETY OF DEVICES AND BROWSERS 

   TEXT PROPERTIES : 
1. Text alignment : 
2. Text Decoration  :  underline , overline , none 
3. Text Transform : uppercase, lowercase, capitalize 
4. Text Spacing : letter-spacing , word , line-height
5. Text Shadow : offset- x y blur-radius clr 
   p::first-letter{
      text-Transform:uppercase,

   }

            BOX MODEL : 
  MARGIN -
  BORDER - ARE USED TO VISUALLY SEPARATE AND VIEW THE BOUNDARIES OF AN ELEMENT 
  {
       border : 2px solid blue(wd,style,clr) ; 

       border-style : hidden , dotted , dashed , solid , double , groove , ridge , inset , outset 
       border-style : hidden double dashed (top , lft and right , btm)

       border-radius : 10px; 
       border-radius: 10px 20%;(top-left & btm-right, top-right & btm-left)

       border-radius: 15px 5px 10px 20px; (top-left , top-right , bottom-right , bottom-left);
  }
  PADDING - Used to create space around an element's content , inside of any defined borders . 
  {
      padding : 5px 10px; (vertical and horizontal)
      padding: 1px 2px 2px ; (top , left and right , bottom )
      padding : 2px 4px 3px 5px (top,right,btm,left)  

      -ve Padding : 
      padding : 

      USE CASES : 

      -> SPACING ELEMENTS : used to add space b/w an element's content and its border , creating separation b/w elements and a web page .
      -> BUTTON STYLING : Used to cntrl the spacing inside buttons , making them visually appealing and comfortable to click . 
      -> Text and Images 
      -> Responsive desing : 
      -> Creating Boxes and Panels :     

  }
  MARGIN - it defines the space outside the element's border . It creates separation between the element and other elements in the layout . Margin creates extra space around an element , unlike padding which creates extra space within an element. 
  {
      margin : mg-top mg-right mg-btm mg-left ;
      margin : mg-top mg-rightANDmg-left mg-btm;
      margin : mg-top&mg-btm mg-left&mg-right; 

      advanced margin : 
V.IMP::1. auto - > to horizontally center an elem within its container . This is cmly used for centering block-level elements. 


      2. -ve margins -> to overlap elements or pull elements closer to each other . However , be cautious with -ve margins , as they can lead to unexpected layouts and should be used sparingly . 
      3. Collapsing margin : When two adjacent margins meet , they can collapse into a single margin . This behaviour is imp. to understand , especially when dealing with elements like p and headigs . The larger of the two margins takes precedence.     
  }
  CONTENT - 

  BOX-SIZING : controls how the total widht and height of an element are calculated , including its content, padding , border . It has two possible values : content-size(default) and border-box   

  Gradient : Way to create smooth transitions between two or more specified colors . They are useful in web design because they allow for the creation of visually appealing bckgrnds , btns , txt affects , enhancing the overall design and user experience  .   

  1. background-image : linear-Gradient( (to right) / 90deg , red,yellow)
  2. 
  3. 
  4.  

  linear gradient - create a smooth transition along a st line , such as fromt top to btm .
  Radial gradient - create a cirular transition from center outwards . 
      
      Repeating linear gradient : background-image : repeating-linear-gradient(45 deg,clr1,clr2,repeatAfter);

      Add overlay to an image :  

BOX SHADOW : 
{
   box-shadow : x,y,blur-raidus,density/spread, color . 
}

DROP SHADOW : 
{
   same as box shadow but spread is not there . 
}

FILTERS : These are a set of graphical effects that can be applied to HTML ele to modify their appearance . Filters can alter properties like clr, brightness , contrast et.   
{
   grayscale()
   opacity()
   blur()
   contrast()
   brightness()
   invert()
}

LIST : 
{
   list-style-type: 
   list-style-position: inside / outside 
   list-style-image:
   list-style-property:
}

ANCHOR :
{
   a:link
   a:hover 
   a:visited
   a:active 

   LVHA - ACCRONYM FOR LIST STLE 
}

COMBINATORS : Used to define relationships btw diff elements in your HTML doc . They 
allow you to target elements based on their position and heirarchy.
{ 
   descendant selector (space) : Selects an element that is a descendant of another element.

   adjacent sibling selector (+) : Selects an element that is immediately preceded by another element . 
   child selector (>) : Selects an element that is a direct child of another element . 
   general sibling selector (~) : Selects all element that are siblings of another element and share the same parent. 

   Universal selector : Selects all elements.   
}

DISPLAYS : 
{
   Block Level Element   :
   {
      display: block 
      -> The block value  makes the element a blck-level element. Blcok-level elements create a new blcok formatting
      context and take up the full widht avl . They start on a new line, pushing subsequent elements below them. 
      example : p , li , heading , container 

      Vertical Stacking : They stack on top of each other , creating a vertical layout.  
   }
   Inline Element  :
   {
      display:inline 
      -> The inline value makes the element an inline level element . Inline elements only take up as much width as necessary . And they don't create a new blcok formatting context . Inline elements can appear on the same line as other inline elements . We can't give width and heights to inline elements .  

      example : links, spans, emphasis .      

   } 
   Inline - Block :
   {
      display:inline-block 
      -> The inline-block value combines aspects of both block and inline . Elements with inline-block behave like inline elements but can have dimensions (width and height) and vertical alignment . 

      example : Used for creating custom -styled buttons , images with captions and  
   }   

   none :
   {
      display : none
   } 

   How do you center an element horizontally using display:block 
   {
      display:block ; 
      You can set its left and right margin as auto .    
   }

   What is the default behaviour of display:inline element with respect to margin and padding 
   {
      They don't respect top and bottom margins or padding , only left and right / Also width and height is not accepted.  
   }
   
   How can you make an inline element like a link or a span act like a block level element ? 
   {
      display:block or display : inline-block 
   }
}

POSITION : This property in CSS is used to control the positioning of elements within a web page  . It defines how an element should be placed relative to its normal position in the doc flow or relative to its parent or containing elements.   
{
   Relative : 
   {
       elements are positioned to their normal position in the doc flow .  

       .nth-child(number): {
         left:
         right:
       }
   }
   Absolute : 
   {
      position : absolute 
      top : 50%
      left : 50%
      ->  element with pos abs are positioned relative to the nearest positioned ancestar or the initial containing block . 

      Q. How can you ensure that an element with pos abs is potitioned relative to the entire viewport ? 
      -> Ensure that none of its ancestors have a pos property set to relative , abs , fixed or sticky .    
   }
   Static : 
   {
      position : static 
      -> 
   }
   Fixed : 
   {
      position : fixed 
      -> Element are positioned relative to the viewport , so they remain in the same position even when the page is scrolled ; 

   }
   Sticky : 
   {
      position : sticky 
      -> Elements with position sticky are initially positioned acc to the normal flow , but they bcm sticky ad stay within the viewport once they reach a specified scroll position . You can use top , right , bottom , left properties to the stickness behaviour   
   }
}

Z-INDEX : 
{
   - > This property is used to control the stacking order of elements on a web page . It determines which elements should appear in front of or behind other elements when they overlap in the same space . Elements with higher z-index values are placed in front of elements with lower values of z-index .   
} 
Overflow : This property of CSS which is used to control how content overflows its containing element when it doesn't fit within the avl . space . It's a useful prop for handling content that exceeds its containers dimensions .  
{
   overflow : visible 
   {

   }

   overflow : hidden 
   {
       
   }

   overflow : scroll 
   {

   }

   overflow : auto 
   { 

   }
}

Pseudo-Elements 
{
   ::before 
   {
      -> This pseudo element is used to insert content before the content of an element . It's ofter employes to add decorative elements , icons or text before an element w/o modifying the actual HTML content . 

      content : "" Attribute is must 
        
   }
   ::after 
   {
      -> This pseudo element is used to insert content after the content of an element . It's ofter employes to add decorative elements , icons or text before an element w/o modifying the actual HTML content . 


      content : "" Attribute is must 
   }
   ::first-letter{

   }
   ::first-line
   {

   }
   ::selection 
   {
      -> If you slect the element 
      background-color : #011;
   }
   ::placeholder
   {

   }
}

Psedu Class 
{
   :hover 
   {

   }
   :first-child
   {

   }
   :last-child
   {

   }
   :nth-child(n)
   {

   }
   :nth-of-type(x)
   {

   }
   :first-of-type
   {

   }
   :last-of-type
   {

   }
}

Column Layout in CSS 
{
   column-count
   column-gap
   column-rule 
   column-rule-color
   column-rule-style
   column-fill  
}

Flexbox : 
{
   FlexBox is a 1D layout model that helps you distribute space along a single axis (either horizontally or vertically) in a flexible and efficient way . It allows you to align and distribute elements within a container making it easier to create complex layouts without using floats or positioning . 

   display:flex 
   -> this creates two axis : main and cross . And the container flows in the direction of main axis 

   flex-direction : row ; (main axis is horizontal )
   flex-direction : column ;   (main axis is vertical )
   VALUES : row,row-reverse , column , column-reverse

   space-between : 

   example # putting in center
   {
      .flex-container{
         display:flex;
         flex-direction:row;(main axis is row)
         justify-content:start; (horizontally)
         align-items:start; (works vertically)
      }
   }

   flex-items : Elements inside the flex container are called flex items .

   In a flex container , one axis is considered the main axis , and the other is the cross axis . You can set the main axis to be either horizontal or vertical . 

   -> If the flex-direction:row then horizontal will be main-axis 

   If flex-direction:column the vertical part will be main axis and horizontal become the cross axis . 

   Items display in a row (the flex-direction property's default is row ).   

   flex-direction:row;

   justify-content aligns flex items along the main axis . Values include flex-start,flex-end,center , space-between and space around .
   (horizontally)

   Align-Items : aligns flex items along the cross axis . Values include flex-start,flex-end,center,stretch and baseline . 
   (Vertically)

   flex-wrap: specifeis whether flex items should wrap to the next line when they overflow the container . 
   Values : nowrap(default ),wrap,wrap-reverse;

   align-content:aligns multiple lines of flex items when there is extra space along axis . 
   Values - flex-start,flex-end,center,space-between, space-around ,   

   align-self - Overrides the align-items property for an individual flex item . Allows you to align a single item differently from others . 


               Flex Item Properties (children)
   a. order - determines the order in which a flex item appears relative to other flex items within the container. Lower values come first . 
   b. flex-grow : Specifies how much a flex item should grow to fill available space all main axis. 
   -> Default value is 0 , meaning it won't grow . 
   c. flex-shrink : specifies how much a flex item should when there isn't enough space along the main axis . 
   -> Default value is 1 meaning it will shrink . 
   d. flex-basis : Defines the initial size of a flex item along the main axis . 
   -> Default value is auto , which means the item's size is determined by its content.
   e. flex(shorthand for flex-grow , flex-shrink, and flex-basis):
   - combines the three flex item properties in one declaration .  

               Alignment Properties(Self)
   a. align-self : overrides the align-items property for an individual flex item . Allows you to align a single item differently from others .    


}

GRID : OFTEN REFERRED TO SIMPLY AS GRID , IS A 2-D LAYOUT SYSTEM IN CSS THAT ALLOWS YOU TO DESIGN COMPLEX WEB LAYOUTS WITH ROWS AND COLUMNS . IT PROVIDES A HIGHLY FLEXIBLE AND PRECISE WAY TO ARRANGE AND ALIGN CONTENT ON A WEBPAGE . 
{
   Grid Container and Grid Items : A grid layout consists of a grid container and its grid items . The grid container is an element that contains grid items . It's often an immediate parent element . Grid Items are the children of the grid container , and they are positioned within the grid . 

    DEFINING THE GRID : 
    -> To create a grid , you first define the cols and rows . 
    -> Use the grid-template-columns and grid-template-rows properties to set the sizes and structure of the grid .
    -> Cols and rows can be specified as fixed sizes(eg pixels) or flexible sizes (eg % , fractions).

    GRID LINES AND TRACKS :      
    -> Grid lines are the dividing lines between cols and rows . 
    -> Tracks r the spaces btw grid lines where content can be placed . 
    -> u can name grid lines and tracks for better org . 

    PLACING GRID ITEMS : 
    -> Grid Items r placed within the grid using the grid-column and grid-row properties .
    -> You can also use the shorthand property grid-area to specify both col and row placement using the single declaration. 

    EXPLICIT VS IMPLICIT GRID : 

    GRID GAPS : 
    -> Spaces btw grid items and tracks . 
    -> U can control cols and rows separately using grid - column and grid-row-gap properties or the shorthand grid-gap . 

     Grid AUTO :
     -> Grid Items can be automatically placed using grid-auto-flow . By default , the fill rows, but u can change this behaviour to fill cols . 
     -> grid-auto-rows and grid-auto-columns control the size of automatically placed items . 

     Responsive GRIDS : 
     -> Grid Items can be repositioned and resized automatically as the viewport size changes . 
     -> Use media queries to adjust grid layouts for different screen sizes .

     ALIGNMENT AND JUSTIFICATION : 
     -> U can align and justify content within grid items and the grid container itsefl . 
     -> Properties like justify-items , align-items , justify-content and align-content help u control alignment and spacing . 

           {
               display : grid ; 
               grid-template-rows : 250px 250px ; 
               grid-template-columns: 250px 250px 1fr;
               grid-template-columns: 1fr 1fr 1fr;
               grid-template-columns : repeat(how_many,eachspace); ex repeat(3,1fr);

               grid-row-gap: 50px  ; 
               or
               row-gap:50px;

               grid-columns-gap:50px ; 
               or 
               column-gap: 50px; 

               gap : 50px; 

               
           }

           .items1{
            grid-row-start=x1;
            grid-row-end=x2;
                  or 
            grid-row=x1/x2;


            grid-column-start=y1;
            grid-column-end=y2;

                  or 
            grid-column : y1/y2;

            grid-area : x1/x2/y1/y2;

            //We can implement colspan with these properties => Explicit Vs Implicit Grid 

            grid-auto-rows : 250px; 

            aling-items : center ; 
            align-teims : self-start/self-end;
            align-items : stretch ; 

            justify-items : self-start/self-end;
            justify-items : center ; 
            justify-items : end/stretch;  
            
            grid-template-columns : 1fr min-content max-content ; 
            
            grid-template-columns : minmax(250px,300px);
            
            //RESPONSIVE GRID  
            grid-template-columns : minmax(auto-fill,minmax(250px,1fr));
             

           }


}

TRANSITIONS : 
{
   1. transition-property  : Specifies which properties should be transitioned .
   Example : Transition the clr and background-color properties 
   .element{
      transition-property:color , background-color ; 

   }
   2. transition-timing-function : specifies the timing curve used for the transition 
   .element{
      transition-timing-function:ease-in-out;
   }


   3. transition-duration : Defines how long the transition should take to complete
   .element{
      transition-duration : 1s;
      It accepts s and ms values too  
   } 

   4. transition-delay : Sets a delay before the transition starts  
   Example : Starting the transition after 0.5 seconds ; 


   SHORTHAND : 
   (property name | duration | easing function | delay )
   transition : margin-right 4s ease-in-out 1s;

   {
      transition-property:width;
      transition-duration:1s;
      transition-timing-function:ease-in-out/linear;
      transition-delay : 2s;

      on parent
      {
         transition : all function delay;
      }
       
   }

   transform : translateX/Y(90vw,0);



}

TRANSFORM : 
{
   transform : translate()
   {
      translate3d(),translateX(),translateY()

      or 
      translate: x y ; 

   }
   transform : scale()
   {
      scaleX(),scaleY();

      scale: 2 ; 
      or 
      transform : scale(2);
   }
   transform:rotate()
   {
      rotate(90deg);
      rotateX();
      rotateY();
      rotate3d();
      rotateZ();
   }
   transform:skew()
   {
      transform : skew();
   }

   TRANSFORM-ORIGIN : allows you to specify the point around which a transformation should occur . It determines the origin point for transformation functions like rotate , scale , skew , and translate . Understanding how transform-origin works is crucial for controlling the position and behaviour of transformed element ;   

   transform-origin: left; 
}

ANIMATION 
{
   animation-name : Specifies the name of the keyframe animation u want to apply to an element  
   {

   }
   animation-duration : sets the duration of the animation in s or ms 
   {

   }
   animation-timing-function : timing-function determines the accelaration and decelaration of the animation  
   {
      Values : [ease,linear,ease-in,ease-out,ease-in-out]
   }
   animation-delay : delay before the animation starts can be in s or ms  
   {

   }
   animation-iteration-count : sets the number of times the animation should repeat . You can use values like infinite , 3 , or 2n(for even iterations )
   {
      Example  
   }
   animation-direction : Determines whether the animation runs forward , backwards , or alternator between forward and backward cycles . 
   {
      Values : normal , reverse , alternate and alternate-reverse.      
   }

   @keyframes : This is not a property but a rule used to define the animation's keyframes specify how the element should look at various points during the animation .

   {
      animation-name:MyAnimationName;
      animation-duration:3s;

   }   

   @keyframe MyAnimationName
   {
      from 
      {
         translate:0%;

      }
      to{
         translate:90vw;
         translate:calc(90vw-100px);
      }
   } 
}

